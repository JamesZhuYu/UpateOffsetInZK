/**
 * Created by James on 15/5/24.
 */

import java.nio._
import java.text.SimpleDateFormat
import java.util.{Properties, TimeZone}
import kafka.api.{FetchRequestBuilder, OffsetRequest, PartitionOffsetRequestInfo}
import kafka.common.{KafkaException, TopicAndPartition}
import kafka.consumer.{ConsumerConfig, SimpleConsumer}
import kafka.utils.{ZKStringSerializer, ZKGroupTopicDirs, ZkUtils}
import org.I0Itec.zkclient.ZkClient

/**
 *  A utility that updates the offset of every broker partition to the offset of earliest or latest log segment file, in ZK.
 */
object UpdateOffsetsInZK {
  val Earliest = "earliest"
  val Latest = "latest"
  val sdf = getSimpleDateFormat;

  def main(args: Array[String]) {
    val p = new Properties();
    val group = args(0)
    val topic = args(1) 
    val sign = args(2)
    val offsetBegin = args(3).toLong
    p.setProperty("zookeeper.connect", "172.11.3.111:2181,172.11.3.112:2181,172.11.3.113:2181")
    p.setProperty("group.id", group)
    p.setProperty("zookeeper.connection.timeout.ms", "10000")

    val config = new ConsumerConfig(p)
    val zkClient = new ZkClient(config.zkConnect, config.zkSessionTimeoutMs, config.zkConnectionTimeoutMs, ZKStringSerializer)
    updateKafkaOffset(zkClient, config, topic, sign,offsetBegin,true)

  }

  private def updateKafkaOffset(zkClient: ZkClient, config: ConsumerConfig, topic: String, sign: String, offsetBegin: Long,updateZk:Boolean): Unit = {
    val partitionsPerTopicMap = ZkUtils.getPartitionsForTopics(zkClient, List(topic))
    var partitions: Seq[Int] = Nil

    partitionsPerTopicMap.get(topic) match {
      case Some(l) => partitions = l.sortWith((s, t) => s < t)
      case _ => throw new RuntimeException("Can't find topic " + topic)
    }

    var numParts = 0
    for (partition <- partitions) {
      val brokerHostingPartition = ZkUtils.getLeaderForPartition(zkClient, topic, partition)

      val broker = brokerHostingPartition match {
        case Some(b) => b
        case None => throw new KafkaException("Broker " + brokerHostingPartition + " is unavailable. Cannot issue " +
          "getOffsetsBefore request")
      }

      ZkUtils.getBrokerInfo(zkClient, broker) match {
        case Some(brokerInfo) =>
          val consumer = new SimpleConsumer(brokerInfo.host, brokerInfo.port, 10000,  1024000, "UpdateOffsetsInZk")
          val topicAndPartition = TopicAndPartition(topic, partition)
          val request = OffsetRequest(Map(topicAndPartition -> PartitionOffsetRequestInfo(OffsetRequest.LatestTime, 100000)))
          val offsets = consumer.getOffsetsBefore(request).partitionErrorAndOffsets(topicAndPartition).offsets
          var offset = offsetBegin
          var preOffset = 0L
          var find = false
          var log: String = ""
          var prelog: String = ""
          var preoffset: Long = 0

          while ( !find) {
            val fetchRequestBuilder = new FetchRequestBuilder()
            fetchRequestBuilder.addFetch(topicAndPartition.topic, topicAndPartition.partition, offset, 200000)
            val fetchRequest = fetchRequestBuilder.build()
            val messages = consumer.fetch(fetchRequest).messageSet(topic,partition)
            for (msg <- messages if !find) {
              preoffset = offset
              prelog = log
              offset = msg.offset

//              println(offset)
              log = toString(msg.message.payload,"utf-8")

              if (log.startsWith(sign)) {
                println(preoffset + " => " + prelog)
                println(offset + " => " + log)
                if(updateZk) {
                  val topicDirs = new ZKGroupTopicDirs(config.groupId, topic)
                  println("updating partition " + partition + " with new offset: " + offset)
                  ZkUtils.updatePersistentPath(zkClient, topicDirs.consumerOffsetDir + "/" + partition, offset.toString)
                }
                find = true
              }

            }
            offset+=1L
          }

          numParts += 1
        case None => throw new KafkaException("Broker information for broker id %d does not exist in ZK".format(broker))
      }
    }
    println("updated the offset for " + numParts + " partitions")
  }

  def getSimpleDateFormat: SimpleDateFormat = {
    val sdf: SimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    sdf.setTimeZone(TimeZone.getTimeZone("GMT+8:00"))
    return sdf
  }

  def dateToLong(date: String): Long = {
    val sdf: SimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd")
    sdf.setTimeZone(TimeZone.getTimeZone("GMT+8:00"))
    return sdf.parse(date).getTime
  }
  def toString(buffer: ByteBuffer, encoding: String): String = {
    val bytes = new Array[Byte](buffer.remaining)
    buffer.get(bytes)
    new String(bytes, encoding)
  }
}
